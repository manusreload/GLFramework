<?php
/**
 * Created by PhpStorm.
 * User: manus
 * Date: 25/02/16
 * Time: 10:28
 */

namespace GLFramework\Modules\Admin;


use GLFramework\Controller;
use GLFramework\Controller\AuthController;
use GLFramework\Events;
use GLFramework\Mail;
use GLFramework\Model\Page;
use GLFramework\Model\User;
use GLFramework\Model\UserPage;
use GLFramework\Module\ModuleManager;

class users extends AuthController
{
    var $controllers = array();
    var $admin = true;

    /**
     * @var Page
     */
    var $pages;
    var $pages_array;
    /**
     * @var User
     */
    var $users;
    var $users_all;
    var $userPages;
    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub
        $params = $this->params;
        $modulues = ModuleManager::getInstance()->getModules();
        $this->pages = new Page();
        $this->users = $this->instanceUser(null);
        $this->users_all = $this->users->get_all()->order('id')->getModels();
        $this->userPages = new UserPage();
        foreach($modulues as $module)
        {
            $items = $module->getControllers();
            foreach($items as $item => $value)
            {
                $this->controllers[] = $item;
            }
        }
        if(isset($params['id']))
        {
            $this->users = $this->users->get($params['id'])->getModel();
            if(isset($_GET['login']))
            {
                $_REQUEST['remember'] = true;
                if($this->processLogin($this->users->user_name, $this->users->password, false))
                {
                    $this->quit("/home");
                    return false;
                }
                else
                {
                    $this->addMessage("Se ha producido un error al suplantar la identidad");
                }

            }
            if($params['id'] == 'add' || $this->users->id != 0)
            {
                if(isset($params['controller']))
                {
                    $controllerName = $this->fixController($params['controller']);

                    if($this->isControllerExists($controllerName))
                    {

                        $page = new Page();
                        $page = $page->get(array('controller' => $controllerName))->getModel();
                        $page->generate($controllerName);
                        if($page->save(true))
                        {
                            $userPages = new UserPage();
                            $userPages = $userPages->getByPageUser($this->users->id, $page->id)->getModel();
                            if($params['state'] != "delete")
                            {
                                $userPages->id_page = $page->id;
                                $userPages->id_user = $this->users->id;
                                $userPages->allowed = ($params['state'] == "allow")?"1":"0";
                                if($userPages->save())
                                {
                                    $this->addMessage("Se han aplicado los cambios correctamente");
                                }
                                else
                                {
                                    $this->addMessage("No se ha podido habilitar el permiso", "danger");
                                }
                            }
                            else
                            {
                                if($userPages->delete())
                                {
                                    $this->addMessage("Se ha eliminado la concesion de esta pagina");
                                }
                                else
                                {
                                    $this->addMessage("No se han podido guardar los cambios", "danger");
                                }
                            }

                        }
                        else
                        {
                            $this->addMessage("No se ha podido generar la pagina", "danger");
                        }
                    }
                    else
                    {
                        $this->addMessage("Este controlador no es válido", "danger");
                    }
                }
                if(isset($_POST['save']))
                {
                    if(!empty($_POST['password']))
                    {
                        if($_POST['password'] == $_POST['password_validation'])
                        {

                            $_POST['password'] = $this->users->encrypt($_POST['password']);
                        }
                        else
                        {
                            $this->addMessage("Las contraseñas no coinciden", "danger");
                            unset($_POST['password']);
                        }
                    }
                    else
                    {
                        unset($_POST['password']);
                    }
                    $this->users->setData($_POST);
                    if($this->users->save(true))
                    {
                        $this->addMessage("Se ha actualizado correctamente");
                    }
                    else
                    {
                        $this->addMessage("Se ha producido un error al guardar los datos", "danger");
                    }
                    if(isset($_POST['welcome_mail']) && $_POST['welcome_mail'])
                    {
                        if(ModuleManager::exists("login"))
                        {
//                            die($this->getLink('GLFramework\Modules\Login\recovery', array('token' => 'abc')));
                            $this->sendWelcomeEmail($this->users);
                        }
                        else
                        {
                            $this->addMessage("Para enviar el mail de bienvenida tienes que tener el modulo 'login' activado", "danger");
                        }
                    }
                }

                if($this->users->id != 0)
                    $this->pages_array = $this->users->getPages();

                $this->setTemplate("users_edit.twig");
            }
            else
            {
                $this->addMessage("No se encuentra este usuario", "danger");
                $this->quit($this->getLink('GLFramework\Modules\Admin\users'));
            }
        }

        if(isset($_POST['send-mail']))
        {
            foreach ($_POST['ids'] as $id)
            {
                $this->sendWelcomeEmail(new \User($id));
            }
        }
    }

    public function isControllerExists($controller)
    {
        return in_array($controller, $this->controllers);
    }

    public function isPageDefined($controller)
    {
        foreach($this->pages_array as $page)
        {
            if($page['controller'] == $controller) return true;
        }
    }
    public function isPageAllowed($controller)
    {
        foreach($this->pages_array as $page)
        {
            if($page['controller'] == $controller) return $page['allowed'];
        }
    }

    public function isPagePermission($controller)
    {
        $ins = new $controller();
        if(Events::dispatch('isUserAllowed', array($ins, $this->users))->any(DISALLOW_USER))
        {
            return false;
        }
        return true;
    }

    public function getModuleNameByController($controller)
    {
        $modules = ModuleManager::getInstance()->getModules();
        foreach($modules as $module)
        {
            $controllers = $module->getControllers();
            foreach($controllers as $key => $value)
            {
                if($controller == $key) return $module;
            }
        }
        return null;

    }

    private function fixController($controller)
    {
        $controller = str_replace("/", "\\", $controller);
        return $controller;
    }

    public function getPrivilegesGroups()
    {
        $group = new \Group();
        $result = $group->get_all();
//        print_debug($result);
        return $result->models;
    }

    public function sendWelcomeEmail($user)
    {
        $recovery = new \UserRecovery();
        $recovery = $recovery->generateNew($user);
        $recovery->save(true);
        $mail = new Mail();
        $message = $mail->render($this, "mail/welcome.twig", array('user' => $user, 'recovery' => $recovery));
        if($mail->send($user->email, "Bienvenido a " . $this->config['app']['name'], $message))
        {
            $this->addMessage("Se ha enviado un email al usuario con los pasos que tiene que seguir para acceder al servicio");
        }
        else
        {
            $this->addMessage("Se ha producido un error al enviar el email, verifique los parametros de configuración.", "danger");
        }
    }



}