<?php

namespace Core\Installer;
use GLFramework\Controller;
use GLFramework\DatabaseManager;
use GLFramework\Events;
use GLFramework\Model\User;
use GLFramework\Module\ModuleManager;
use Symfony\Component\Yaml\Yaml;

/**
 * Created by PhpStorm.
 * User: manus
 * Date: 26/5/16
 * Time: 23:10
 */
class setup extends Controller
{

    var $yamlDestination = "autogenerated.config.yml";
    var $step;
    var $db_config;
    var $hasAdmin;

    /**
     * Implementar aqui el código que ejecutara nuestra aplicación
     * @return mixed
     */
    public function run()
    {
        // TODO: Implement run() method.
        if($this->config['app']['configured'])
        {
            $this->addMessage("El sitio ya esta configurado!", "warning");
            $this->quit("/");
            return true;
        }
        $this->step = $this->params['step'];
        if(!$this->step) $this->step = "1";
        if(isset($_POST['save']) || isset($_POST['create_database']))
        {
            if($this->step == "1")
            {
                $config = $this->loadCurrentConfig();
                $config['app']['name'] = $_POST['site_name'];
                $config['app']['debug'] = $_POST['debug']?true:false;
                if($this->saveConfig($config))
                {
                    $this->quit($this->getLink($this, array('step' => "2")));
                }
            }
            else if($this->step == "2")
            {

                $config = $this->loadCurrentConfig();
                $config['database']['hostname'] = $_POST['hostname'];
                $config['database']['username'] = $_POST['username'];
                $config['database']['password'] = $_POST['password'];
                $config['database']['database'] = $_POST['database'];
                try
                {
                    $this->db_config = new DatabaseManager($config);
                    if(isset($_POST['create_database']))
                    {
                        if($this->db_config->exec("CREATE DATABASE `{$config['database']['database']}`"))
                        {
                            $this->db_config->reset();
                            if($this->db_config->connect())
                            {
                                $this->addMessage("Se ha creado la base de datos con éxito");
                            }
                        }
                        else
                        {
                            $this->addMessage("No se ha podido crear la base de datos", "danger");
                        }
                    } 

                    if($this->db_config->isSelected())
                    {
                        $this->addMessage("Se ha conectado correctamente con la base de datos");
                        $this->saveConfig($config);

                        $this->quit($this->getLink($this, array('step' => "3")));
                    }
                    else
                    {
                        $this->addMessage("No se puede econtrar la base de datos", "danger");
                    }

                }
                catch (\Exception $ex)
                {
                    Events::fire('onException', $ex);
                    $this->addMessage($ex->getMessage(), "danger");
                }
            }
            else if($this->step == "3")
            {
                $this->quit($this->getLink($this, array('step' => "4")));
            }
            else if($this->step == "5")
            {

                $config = $this->loadCurrentConfig();
                $config['app']['configured'] = true;
                $this->saveConfig($config);
                $this->quit("/");
            }
        }
        if($this->step == "4")
        {
            $user = \User::newInstance('User');
            $this->hasAdmin = $user->get(array('admin' => '1'))->count() > 0;
            if(!$this->hasAdmin)
            {
                if(isset($_POST['save']))
                {
                    if($_POST['password'] == $_POST['password_retype'])
                    {
                        $user->admin = 1;
                        $user->user_name = $_POST['username'];
                        $user->nombre = $_POST['nombre'];
                        $user->password = $user->encrypt($_POST['password']);
                        $user->email = $_POST['email'];
                        if($user->save())
                        {
                            $this->addMessage("Se ha creado la cuenta correctamente. Login: " . $user->user_name);
                        }
                        else
                        {
                            $this->addMessage("Se ha producido un error al crear la cuenta", "danger");
                        }
                    }
                    else
                    {
                        $this->addMessage("Las contraseñas no coinciden", "danger");
                    }
                    
                }
            }
        }
    }

    private function loadCurrentConfig()
    {
        return Yaml::parse(file_get_contents($this->yamlDestination));
    }

    private function saveConfig($config)
    {
        if(!file_put_contents($this->yamlDestination, Yaml::dump($config)))
        {
            $this->addMessage("No se puede escribir sobre '{$this->yamlDestination}'", "danger");
            return false;
        }
        return true;
    }
}